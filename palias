#!/usr/bin/env python3

import argparse
import os
import sqlite3

DB_NAME='PAlias.sqlite'


class Alias:
    name: str
    # _path: str

    @property
    def path(self) -> str:
        return self._path

    @path.setter
    def path(self, value) -> None:
        if value == '.':
            value = os.getcwd()

        self._path = os.path.realpath(value)

    def __init__(self, name:str, path:str) -> None:
        self.name = name
        self.path = path

    @staticmethod
    def fromList(list:list):
        if len(list) !=2:
            raise Exception('needs list with 2 elements')
        return Alias(list[0], list[1])

class Repository:
    _db:sqlite3.Connection = ''
    _db_tpl = '''
        CREATE TABLE alias (
            alias TEXT,
            "path" TEXT
        );
        CREATE UNIQUE INDEX alias_alias_IDX ON alias (alias,"path");
    '''

    def __init__(self, conn:sqlite3.Connection) -> None:
        self._db = conn

    def setup(self) -> None:
       c:sqlite3.Cursor = self._db.cursor()
       c.executescript(self._db_tpl)
       self._db.commit()

    def add(self, alias:Alias) -> None:
        c:sqlite3.Cursor = self._db.cursor()
        c.execute("INSERT INTO alias VALUES(?,?)", (alias.name, alias.path))
        self._db.commit()

    def list_all(self) -> list[Alias]:
        c:sqlite3.Cursor = self._db.cursor()
        res = c.execute("SELECT * FROM alias ORDER BY alias ASC")
        return [Alias.fromList(row) for row in res.fetchall()]

    def find(self, alias:str) -> str|None:
        c:sqlite3.Cursor = self._db.cursor()
        res = c.execute("SELECT path FROM alias where alias=?", (alias,))
        path = res.fetchone()

        return None if path is None else path[0]

    def remove(self, alias:str) -> None:
        c:sqlite3.Cursor = self._db.cursor()
        c.execute("DELETE FROM alias WHERE alias=?", (alias,))
        self._db.commit()


class PAlias:
    _repo:Repository = None

    def __init__(self, repo:Repository) -> None:
        self._repo = repo

    def add_alias(self, prompt:list) -> None:
        if len(prompt) != 2:
            raise Exception('--add needs 2 arguments, alias and path')

        self._repo.add(Alias.fromList(prompt))

    def find_alias(self, prompt:list) -> str:
        if (len(prompt) < 1):
            return ''
        res = self._repo.find(prompt[0])

        print('' if res is None else res)

    def list_aliases(self) -> None:
        print("Alias\tPath")
        for row in self._repo.list_all():
            print(row.name +"\t"+row.path)

    def delete_alias(self, prompt:list)-> None:
        if len(prompt) != 1:
             raise Exception('--remove needs 1 argument, alias')

        self._repo.remove(prompt[0])


if __name__ == "__main__":
    parser = argparse.ArgumentParser( prog='PAlias', description='Path Alias Manager' )
    parser.add_argument('prompt', nargs='*')
    parser.add_argument('--add', action='store_true', help='Add a new alias eg: --add <alias> <path>')
    parser.add_argument('--find', action='store_true', help="Finds a path by an alias, used for shell auto completion eg --find <alias>")
    parser.add_argument('--list', action='store_true', help="List all aliases")
    parser.add_argument('--remove', action='store_true', help="Removes an alias eg: --remove <alias>")
    args = parser.parse_args()

    db_path:str = os.path.join(os.path.expanduser("~"), DB_NAME)

    setup_needed:bool = not os.path.exists(db_path)

    repository = Repository(sqlite3.connect(db_path))
    if (setup_needed):
        repository.setup()

    app = PAlias(repository)

    if args.add is True:
        app.add_alias(args.prompt)
        exit(0)

    if args.find:
        app.find_alias(args.prompt)
        exit(0)

    if args.list:
        app.list_aliases()
        exit(0)

    if args.remove:
        app.delete_alias(args.prompt)
        exit(0)

    print(parser.print_help())


